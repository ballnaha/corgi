generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  lineUserId    String     @unique @map("line_user_id")
  displayName   String     @map("display_name")
  pictureUrl    String?    @map("picture_url")
  email         String?
  statusMessage String?    @map("status_message") @db.Text
  createdAt     DateTime   @default(now()) @map("created_at")
  lastLoginAt   DateTime   @default(now()) @map("last_login_at")
  phoneNumber   String?    @map("phone_number")
  role          String     @default("USER") // USER, ADMIN, SUPER_ADMIN
  isAdmin       Boolean    @default(false) @map("is_admin")
  favorites     Favorite[]
  orders        Order[]

  @@map("users")
}

enum ProductType {
  PET         // สัตว์เลี้ยง
  FOOD        // อาหารสัตว์
  TOY         // ของเล่น
  ACCESSORY   // อุปกรณ์/เครื่องใช้
  MEDICINE    // ยา/วิตามิน
  GROOMING    // อุปกรณ์ดูแลขน
  HOUSING     // บ้าน/กรง
  OTHER       // อื่นๆ
}

model Product {
  id              String         @id @default(cuid())
  name            String
  description     String?        @db.Text
  price           Decimal        @db.Decimal(10, 2)
  imageUrl        String?        @map("image_url")
  category        String
  stock           Int            @default(0)
  isActive        Boolean        @default(true) @map("is_active")
  
  // ประเภทสินค้า - ใหม่
  productType     ProductType    @default(OTHER) @map("product_type")
  
  // ข้อมูลเฉพาะสัตว์เลี้ยง - ทำให้เป็น optional ทั้งหมด
  gender          String?
  age             String?
  weight          String?
  breed           String?
  color           String?
  vaccinated      Boolean?       // เปลี่ยนจาก @default(false) เป็น optional
  certified       Boolean?       // เปลี่ยนจาก @default(false) เป็น optional
  healthNote      String?        @map("health_note") @db.Text
  location        String?
  contactInfo     String?        @map("contact_info") @db.Text
  
  // ข้อมูลทั่วไป - สำหรับสินค้าทุกประเภท
  brand           String?        // แบรนด์
  model           String?        // รุ่น/โมเดล
  size            String?        // ขนาด (S, M, L หรือระบุเป็นตัวเลข)
  material        String?        // วัสดุ
  weight_grams    Int?           @map("weight_grams") // น้ำหนักสินค้า (กรัม)
  dimensions      String?        // ขนาด (กว้าง x ยาว x สูง)
  
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  categoryId      String?        @map("category_id")
  discountPercent Decimal?       @map("discount_percent") @db.Decimal(5, 2)
  salePrice       Decimal?       @map("sale_price") @db.Decimal(10, 2)
  favorites       Favorite[]
  orderItems      OrderItem[]
  images          ProductImage[]
  categoryRef     Category?      @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([productType])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  imageUrl  String   @map("image_url")
  altText   String?  @map("alt_text")
  order     Int      @default(0)
  isMain    Boolean  @default(false) @map("is_main")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "product_images_product_id_fkey")
  @@map("product_images")
}

model Order {
  id               String          @id @default(cuid())
  userId           String          @map("user_id")
  status           orders_status   @default(PENDING)
  totalAmount      Decimal         @map("total_amount") @db.Decimal(10, 2)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  customerEmail    String?         @map("customer_email")
  customerName     String?         @map("customer_name")
  customerPhone    String?         @map("customer_phone")
  depositAmount    Decimal?        @map("deposit_amount") @db.Decimal(10, 2)
  hasPets          Boolean         @default(false) @map("has_pets")
  paymentType      PaymentType     @default(FULL_PAYMENT) @map("payment_type")
  remainingAmount  Decimal?        @map("remaining_amount") @db.Decimal(10, 2)
  requiresDeposit  Boolean         @default(false) @map("requires_deposit")
  shippingAddress  String?         @map("shipping_address") @db.Text
  shippingFee      Decimal?        @map("shipping_fee") @db.Decimal(10, 2)
  shippingMethod   String?         @map("shipping_method")
  shippingOptionId String?         @map("shipping_option_id")
  discountAmount   Decimal?        @default(0.00) @map("discount_amount") @db.Decimal(10, 2)
  discountCode     String?         @map("discount_code")
  orderNumber      String?         @map("order_number")
  orderItems           OrderItem[]
  paymentNotifications PaymentNotification[]
  shippingOption       ShippingOption?       @relation(fields: [shippingOptionId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])

  @@index([shippingOptionId], map: "orders_shipping_option_id_fkey")
  @@index([userId], map: "orders_user_id_fkey")
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_items_order_id_fkey")
  @@index([productId], map: "order_items_product_id_fkey")
  @@map("order_items")
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([productId], map: "favorites_product_id_fkey")
  @@map("favorites")
}

model Category {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  icon        String?
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  products    Product[]

  @@map("categories")
}

model ShippingOption {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  estimatedDays String   @map("estimated_days")
  isActive      Boolean  @default(true) @map("is_active")
  sortOrder     Int      @default(0) @map("sort_order")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  forPetsOnly   Boolean  @default(false) @map("for_pets_only")
  method        String   @default("delivery")
  orders        Order[]

  @@map("shipping_options")
}

model DiscountCode {
  id          String    @id @default(cuid())
  code        String    @unique
  type        String
  value       Decimal   @db.Decimal(10, 2)
  minAmount   Decimal?  @map("min_amount") @db.Decimal(10, 2)
  description String
  isActive    Boolean   @default(true) @map("is_active")
  validFrom   DateTime? @map("valid_from")
  validUntil  DateTime? @map("valid_until")
  usageLimit  Int?      @map("usage_limit")
  usageCount  Int       @default(0) @map("usage_count")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("discount_codes")
}

model PaymentMethod {
  id          String   @id @default(cuid())
  name        String
  type        String
  description String?
  icon        String?
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("payment_methods")
}

enum PaymentType {
  FULL_PAYMENT
  DEPOSIT_PAYMENT
  REMAINING_PAYMENT
}

model PaymentNotification {
  id                   String                     @id @default(cuid())
  orderId              String                     @map("order_id")
  transferAmount       Decimal                    @map("transfer_amount") @db.Decimal(10, 2)
  transferDate         DateTime                   @map("transfer_date")
  transferTime         String                     @map("transfer_time")
  note                 String?                    @db.Text
  paymentSlipData      String?                    @map("payment_slip_data") @db.LongText
  paymentSlipMimeType  String?                    @map("payment_slip_mime_type")
  paymentSlipFileName  String?                    @map("payment_slip_file_name")
  status               PaymentNotificationStatus  @default(PENDING)
  submittedAt          DateTime                   @default(now()) @map("submitted_at")
  reviewedAt           DateTime?                  @map("reviewed_at")
  reviewedBy           String?                    @map("reviewed_by")
  reviewNote           String?                    @map("review_note") @db.Text
  createdAt            DateTime                   @default(now()) @map("created_at")
  updatedAt            DateTime                   @updatedAt @map("updated_at")
  order                Order                      @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "payment_notifications_order_id_fkey")
  @@map("payment_notifications")
}

enum PaymentNotificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum orders_status {
  PENDING
  PAYMENT_PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  imageUrl    String   @map("image_url")
  imageAlt    String   @map("image_alt")
  background  String   // Gradient CSS string
  linkUrl     String?  @map("link_url")
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("banners")
}