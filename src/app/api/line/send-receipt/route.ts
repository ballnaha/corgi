import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { ORDER_STATUS_INFO, type OrderStatus } from "@/lib/order-status";

interface OrderItem {
  productName: string;
  quantity: number;
  price: number;
  total: number;
}

interface ReceiptData {
  orderNumber: string;
  customerName: string;
  customerEmail?: string;
  customerPhone?: string;
  items: OrderItem[];
  subtotal: number;
  shippingFee: number;
  discountAmount: number;
  total: number;
  paymentType: "FULL_PAYMENT" | "DEPOSIT_PAYMENT";
  depositAmount?: number;
  remainingAmount?: number;
  shippingMethod: string;
  shippingAddress?: string;
  orderStatus?: OrderStatus;
  paymentMethod?: string; // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï, ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô, etc.)
}

export async function POST(request: NextRequest) {
  console.log("üöÄ LINE API called");

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å webhook ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const userAgent = request.headers.get('user-agent') || '';
    const isWebhookCall = userAgent.includes('node') || request.headers.get('x-webhook-source') === 'stripe';
    
    console.log("üîç Request source check:");
    console.log("  User-Agent:", userAgent);
    console.log("  Is webhook call:", isWebhookCall);
    console.log("  X-Webhook-Source:", request.headers.get('x-webhook-source'));

    let lineUserId: string | undefined;

    // Parse ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• receipt ‡∏Å‡πà‡∏≠‡∏ô
    console.log("üìù Parsing receipt data...");
    const receiptData: ReceiptData = await request.json();

    if (isWebhookCall) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook calls - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á LINE User ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order
      console.log("üéØ Webhook call detected - attempting to get LINE User ID from order data");
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ order ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ LINE User ID ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (receiptData.orderNumber) {
        const order = await prisma.order.findFirst({
          where: { orderNumber: receiptData.orderNumber },
          include: { 
            user: {
              select: { lineUserId: true }
            }
          }
        });
        
        if (order?.user?.lineUserId) {
          lineUserId = order.user.lineUserId;
          console.log("‚úÖ Found LINE User ID from order:", lineUserId);
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡πÉ‡∏ô receiptData
          receiptData.orderStatus = order.status as OrderStatus;
          
          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          if (order.status === 'CONFIRMED') {
            receiptData.paymentMethod = "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (Stripe)";
          } else {
            receiptData.paymentMethod = "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô/‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô";
          }
          
          console.log("üìä Order status:", order.status);
          console.log("üí≥ Payment method determined:", receiptData.paymentMethod);
        } else {
          console.warn("‚ö†Ô∏è No LINE User ID found in order data");
        }
      }
      
      if (!lineUserId) {
        console.warn("‚ùå Cannot send LINE notification - no LINE User ID available");
        return NextResponse.json(
          {
            success: false,
            message: "No LINE User ID available for this order",
            skipLine: true,
          },
          { status: 200 }
        );
      }
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö regular API calls - ‡πÉ‡∏ä‡πâ session
      const session = await getServerSession(authOptions);
      console.log("üë§ LINE User ID from session:", session?.user?.lineUserId);

      if (!session?.user?.lineUserId) {
        console.error("‚ùå No LINE user ID found in session");
        console.log("Session user:", session?.user);

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ LINE login ‡πÉ‡∏´‡πâ skip ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE message
        return NextResponse.json(
          {
            success: false,
            message: "LINE messaging requires LINE login",
            skipLine: true,
          },
          { status: 200 }
        );
      }
      
      lineUserId = session.user.lineUserId;
    }
    
    console.log("üìä Receipt data:", {
      orderNumber: receiptData.orderNumber,
      customerName: receiptData.customerName,
      total: receiptData.total,
      itemsCount: receiptData.items?.length,
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á flex message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
    console.log("üîß Creating flex message...");
    const flexMessage = createReceiptFlexMessage(receiptData);
    console.log("‚úÖ Flex message created successfully");
    
    // Validate flex message
    try {
      validateFlexMessage(flexMessage);
      console.log("‚úÖ Flex message validation passed");
    } catch (validationError) {
      console.error("‚ùå Flex message validation failed:", validationError);
      // Fall back to simple text message
      const simpleMessage = {
        type: "text",
        text: `üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n` +
              `‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: #${receiptData.orderNumber}\n` +
              `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${receiptData.customerName}\n` +
              `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${receiptData.total.toLocaleString()}\n` +
              `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà: ${process.env.NEXTAUTH_URL || "https://corgi.theredpotion.com" || "https://red1.theredpotion.com"}/profile`
      };
      
      console.log("üîÑ Using fallback text message");
      const lineResponse = await sendLineMessage(lineUserId, simpleMessage);
      console.log("üì® Fallback message sent with status:", lineResponse.status);
      
      return NextResponse.json({
        success: true,
        message: "Receipt sent to LINE successfully (fallback text)",
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LINE_CHANNEL_ACCESS_TOKEN ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;

    if (!channelAccessToken) {
      console.warn(
        "LINE_CHANNEL_ACCESS_TOKEN is not configured. Skipping LINE message."
      );
      return NextResponse.json({
        success: false,
        message: "LINE messaging is not configured",
        skipLine: true,
      });
    }

    // ‡∏™‡πà‡∏á message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE user
    console.log("üöÄ Calling sendLineMessage...");
    console.log("üéØ Target LINE User ID:", lineUserId);
    console.log("üìè Flex message size:", JSON.stringify(flexMessage).length, "characters");
    
    const lineResponse = await sendLineMessage(
      lineUserId,
      flexMessage
    );
    console.log("üì® sendLineMessage completed with status:", lineResponse.status);

    return NextResponse.json({
      success: true,
      message: "Receipt sent to LINE successfully",
    });
  } catch (error: any) {
    console.error("üö® LINE API Error:", error);
    console.error("Error type:", typeof error);
    console.error("Error name:", error?.name);
    console.error("Error message:", error?.message);

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô configuration error ‡πÉ‡∏´‡πâ return skipLine
    if (
      error?.message === "LINE_API_NOT_CONFIGURED" ||
      error?.message?.includes("Authentication failed") ||
      error?.message?.includes("LINE_CHANNEL_ACCESS_TOKEN is not configured")
    ) {
      console.warn(
        "LINE API is not properly configured. Skipping LINE message."
      );
      return NextResponse.json(
        {
          success: false,
          message: "LINE messaging is not configured properly",
          skipLine: true,
        },
        { status: 200 }
      );
    }

    return NextResponse.json(
      { error: "Failed to send LINE receipt", details: error?.message },
      { status: 500 }
    );
  }
}

function validateFlexMessage(message: any) {
  // Basic validation for flex message structure
  if (!message || typeof message !== 'object') {
    throw new Error('Message must be an object');
  }
  
  if (message.type !== 'flex') {
    throw new Error('Message type must be flex');
  }
  
  if (!message.contents || typeof message.contents !== 'object') {
    throw new Error('Contents must be an object');
  }
  
  if (message.contents.type !== 'bubble') {
    throw new Error('Contents type must be bubble');
  }
  
  if (!message.altText || typeof message.altText !== 'string') {
    throw new Error('altText must be a string');
  }
  
  // Check if message size is reasonable (LINE has limits)
  const messageSize = JSON.stringify(message).length;
  if (messageSize > 80000) { // 80KB limit for detailed flex message
    throw new Error(`Message too large: ${messageSize} characters`);
  }
  
  // Additional validations for flex message contents
  if (message.contents?.body?.contents && Array.isArray(message.contents.body.contents)) {
    const bodyContents = message.contents.body.contents;
    if (bodyContents.length > 50) { // Reasonable limit for body contents
      throw new Error(`Too many body contents: ${bodyContents.length}`);
    }
  }
  
  console.log(`‚úÖ Flex message validation passed (${messageSize} characters)`);
}

function createReceiptFlexMessage(data: ReceiptData) {
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢ 
  // data.total ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  const subtotalWithShipping = data.subtotal + data.shippingFee;
  const totalAfterDiscount = subtotalWithShipping - data.discountAmount;
  
  const finalAmount =
    data.paymentType === "DEPOSIT_PAYMENT"
      ? (data.depositAmount || 0)
      : totalAfterDiscount;

  // Debug logging
  console.log("üí∞ LINE Message Total Calculation:");
  console.log("  Subtotal:", data.subtotal);
  console.log("  Shipping Fee:", data.shippingFee);
  console.log("  Discount Amount:", data.discountAmount);
  console.log("  Subtotal + Shipping:", subtotalWithShipping);
  console.log("  Total After Discount:", totalAfterDiscount);
  console.log("  Final Amount:", finalAmount);
  console.log("  Payment Type:", data.paymentType);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á detailed flex message ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
  const itemsToShow = data.items.slice(0, 5); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  const remainingItems = data.items.length - itemsToShow.length;

  return {
    type: "flex",
    altText: `üîî ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏ø${finalAmount.toLocaleString()} - Natpi & Corgi Farm and Pet Shop`,
    contents: {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "Natpi & Corgi Farm and Pet Shop",
            weight: "bold",
            color: "#ffffff",
            size: "lg",
            align: "center"
          },
          {
            type: "text",
            text: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
            color: "#ffffff",
            size: "xs",
            align: "center",
            margin: "sm"
          }
        ],
        paddingAll: "20px",
        backgroundColor: "#FF6B35",
        spacing: "sm"
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            weight: "bold",
            color: "#FF6B35",
            size: "lg",
            margin: "md"
          },
          {
            type: "separator",
            margin: "lg"
          },
          // Order Information Section
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            contents: [
              {
                type: "text",
                text: "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                weight: "bold",
                color: "#333333",
                size: "md",
                margin: "sm"
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "md",
                contents: [
                  {
                    type: "text",
                    text: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:",
                    size: "sm",
                    color: "#555555",
                    flex: 3
                  },
                  {
                    type: "text",
                    text: `#${data.orderNumber}`,
                    size: "sm",
                    color: "#111111",
                    weight: "bold",
                    align: "end",
                    flex: 2
                  }
                ]
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:",
                    size: "sm",
                    color: "#555555",
                    flex: 3
                  },
                  {
                    type: "text",
                    text: data.customerName,
                    size: "sm",
                    color: "#111111",
                    align: "end",
                    wrap: true,
                    flex: 2
                  }
                ]
              },
              ...(data.customerPhone ? [{
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:",
                    size: "sm",
                    color: "#555555",
                    flex: 3
                  },
                  {
                    type: "text",
                    text: data.customerPhone,
                    size: "sm",
                    color: "#111111",
                    align: "end",
                    flex: 2
                  }
                ]
              }] : []),
              {
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:",
                    size: "sm",
                    color: "#555555",
                    flex: 3
                  },
                  {
                    type: "text",
                    text: data.shippingMethod,
                    size: "sm",
                    color: "#111111",
                    align: "end",
                    wrap: true,
                    flex: 2
                  }
                ]
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:",
                    size: "sm",
                    color: "#555555",
                    flex: 3
                  },
                  {
                    type: "text",
                    text: new Date().toLocaleDateString('th-TH', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      timeZone: 'Asia/Bangkok'
                    }),
                    size: "sm",
                    color: "#111111",
                    align: "end",
                    flex: 2
                  }
                ]
              }
            ]
          },
          {
            type: "separator",
            margin: "lg"
          },
          // Items Section
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            contents: [
              {
                type: "text",
                text: `üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (${data.items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
                weight: "bold",
                color: "#333333",
                size: "md",
                margin: "sm"
              },
              ...itemsToShow.map((item, index) => ({
                type: "box",
                layout: "horizontal",
                margin: "md",
                contents: [
                  {
                    type: "text",
                    text: `${index + 1}. ${item.productName}`,
                    size: "sm",
                    color: "#333333",
                    flex: 4,
                    wrap: true
                  },
                  {
                    type: "text",
                    text: `x${item.quantity}`,
                    size: "sm",
                    color: "#666666",
                    align: "center",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: `‡∏ø${item.total.toLocaleString()}`,
                    size: "sm",
                    color: "#111111",
                    weight: "bold",
                    align: "end",
                    flex: 2
                  }
                ]
              })),
              ...(remainingItems > 0 ? [{
                type: "text",
                text: `... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${remainingItems} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
                size: "xs",
                color: "#999999",
                margin: "sm",
                style: "italic"
              }] : [])
            ]
          },
          {
            type: "separator",
            margin: "lg"
          },
          // Payment Summary Section
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            contents: [
              {
                type: "text",
                text: "üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                weight: "bold",
                color: "#333333",
                size: "md",
                margin: "sm"
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "md",
                contents: [
                  {
                    type: "text",
                    text: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:",
                    size: "sm",
                    color: "#555555",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: `‡∏ø${data.subtotal.toLocaleString()}`,
                    size: "sm",
                    color: "#111111",
                    align: "end",
                    flex: 1
                  }
                ]
              },
              ...(data.shippingFee > 0 ? [{
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:",
                    size: "sm",
                    color: "#555555",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: `‡∏ø${data.shippingFee.toLocaleString()}`,
                    size: "sm",
                    color: "#111111",
                    align: "end",
                    flex: 1
                  }
                ]
              }] : [{
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:",
                    size: "sm",
                    color: "#555555",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: "‡∏ü‡∏£‡∏µ!",
                    size: "sm",
                    color: "#06C755",
                    weight: "bold",
                    align: "end",
                    flex: 1
                  }
                ]
              }]),
              ...(data.discountAmount > 0 ? [{
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:",
                    size: "sm",
                    color: "#555555",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: `-‡∏ø${data.discountAmount.toLocaleString()}`,
                    size: "sm",
                    color: "#FF6B35",
                    weight: "bold",
                    align: "end",
                    flex: 1
                  }
                ]
              }] : []),
              {
                type: "separator",
                margin: "md"
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "md",
                contents: [
                  {
                    type: "text",
                    text: data.paymentType === "DEPOSIT_PAYMENT" ? "üí≥ ‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥:" : "üí≥ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:",
                    size: "md",
                    color: "#111111",
                    weight: "bold",
                    flex: 1,
                    wrap: true
                  },
                  {
                    type: "text",
                    text: `‡∏ø${finalAmount.toLocaleString()}`,
                    size: "xl",
                    color: "#FF6B35",
                    weight: "bold",
                    align: "end",
                    flex: 1
                  }
                ]
              },
              ...(data.paymentType === "DEPOSIT_PAYMENT" && data.remainingAmount ? [{
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤):",
                    size: "sm",
                    color: "#FF9800",
                    weight: "bold",
                    flex: 1,
                    wrap: true
                  },
                  {
                    type: "text",
                    text: `‡∏ø${data.remainingAmount.toLocaleString()}`,
                    size: "lg",
                    color: "#FF9800",
                    weight: "bold",
                    align: "end",
                    flex: 1
                  }
                ]
              }] : [])
            ]
          },
          {
            type: "separator",
            margin: "lg"
          },
          // Status Section
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            contents: [
              {
                type: "text",
                text: "üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                weight: "bold",
                color: "#333333",
                size: "md"
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "md",
                contents: [
                  {
                    type: "text",
                    text: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:",
                    size: "sm",
                    color: "#555555",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: `${data.orderStatus ? ORDER_STATUS_INFO[data.orderStatus].icon : "‚è≥"} ${data.orderStatus ? ORDER_STATUS_INFO[data.orderStatus].label : "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}`,
                    size: "sm",
                    color: data.orderStatus ? ORDER_STATUS_INFO[data.orderStatus].color : "#FF6B35",
                    weight: "bold",
                    align: "end",
                    flex: 2,
                    wrap: true
                  }
                ]
              },
              {
                type: "box",
                layout: "horizontal",
                margin: "sm",
                contents: [
                  {
                    type: "text",
                    text: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:",
                    size: "sm",
                    color: "#555555",
                    flex: 1
                  },
                  {
                    type: "text",
                    text: data.paymentMethod || "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô/‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                    size: "sm",
                    color: "#111111",
                    weight: "bold",
                    align: "end",
                    flex: 2,
                    wrap: true
                  }
                ]
              },
              {
                type: "text",
                text: data.orderStatus === "CONFIRMED" 
                  ? "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                  : "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                size: "xs",
                color: data.orderStatus === "CONFIRMED" ? "#4CAF50" : "#666666",
                wrap: true,
                margin: "sm"
              }
            ]
          }
        ],
        paddingAll: "20px",
        spacing: "sm"
      },

    }
  };
}

async function sendLineMessage(lineUserId: string, message: any) {
  console.log("üì§ Sending LINE message to:", lineUserId);

  const channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;

  if (!channelAccessToken) {
    console.error("‚ùå LINE_CHANNEL_ACCESS_TOKEN is not configured");
    throw new Error("LINE_CHANNEL_ACCESS_TOKEN is not configured");
  }

  console.log(
    "üîë Using channel access token:",
    channelAccessToken ? "‚úÖ Found" : "‚ùå Missing"
  );

  const payload = {
    to: lineUserId,
    messages: [message],
  };

  console.log("üì¶ LINE API payload:", JSON.stringify(payload, null, 2));

  try {
    const response = await fetch("https://api.line.me/v2/bot/message/push", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${channelAccessToken}`,
      },
      body: JSON.stringify(payload),
    });

    console.log("üì° LINE API response status:", response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå LINE API error response:", errorText);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô authentication error ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô configuration issue
      if (response.status === 401) {
        console.warn(
          "LINE API authentication failed - likely due to invalid or missing access token"
        );
        throw new Error("LINE_API_NOT_CONFIGURED");
      }

      throw new Error(`LINE API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log("‚úÖ LINE message sent successfully:", result);
    return response;
  } catch (error) {
    console.error("üö® Error in sendLineMessage:", error);
    throw error;
  }
}
