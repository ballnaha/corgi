import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

interface RouteParams {
  params: Promise<{
    notificationId: string;
  }>;
}

export async function PATCH(request: NextRequest, context: RouteParams) {
  try {
    console.log("üìã PATCH payment notification review API called");
    console.log("Request URL:", request.url);

    // Await params in Next.js 15+
    const params = await context.params;
    console.log("Notification ID:", params.notificationId);

    const session = await getServerSession(authOptions);
    console.log("Session user:", session?.user?.id);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ login ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô admin
    if (!session?.user?.id) {
      console.log("‚ùå Unauthorized - No session");
      return NextResponse.json(
        { error: "Unauthorized - Please login" },
        { status: 401 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin - ‡πÉ‡∏ä‡πâ lineUserId ‡πÅ‡∏ó‡∏ô id
    const user = await prisma.user.findUnique({
      where: { lineUserId: session.user.id },
      select: { isAdmin: true, role: true, displayName: true, email: true }
    });

    console.log("User admin status:", { isAdmin: user?.isAdmin, role: user?.role, user: user?.displayName });

    if (!user?.isAdmin || user.role !== 'ADMIN') {
      console.log("‚ùå Forbidden - Not admin");
      return NextResponse.json(
        { error: "Forbidden - Admin access required" },
        { status: 403 }
      );
    }

    const { notificationId } = params;

    if (!notificationId) {
      console.log("‚ùå Missing notification ID");
      return NextResponse.json(
        { error: "Payment notification ID is required" },
        { status: 400 }
      );
    }

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request body
    const { status, reviewNote } = await request.json();

    if (!status || !['APPROVED', 'REJECTED'].includes(status)) {
      console.log("‚ùå Invalid status:", status);
      return NextResponse.json(
        { error: "Status must be either APPROVED or REJECTED" },
        { status: 400 }
      );
    }

    console.log("üîç Finding payment notification:", notificationId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ payment notification ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const paymentNotification = await prisma.paymentNotification.findUnique({
      where: { id: notificationId },
      include: {
        order: {
          include: {
            user: {
              select: {
                id: true,
                displayName: true,
                email: true,
              }
            }
          }
        }
      }
    });

    if (!paymentNotification) {
      console.log("‚ùå Payment notification not found");
      return NextResponse.json(
        { error: "Payment notification not found" },
        { status: 404 }
      );
    }

    console.log("‚úÖ Payment notification found:", {
      id: paymentNotification.id,
      orderId: paymentNotification.orderId,
      amount: paymentNotification.transferAmount,
      currentStatus: paymentNotification.status
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ review ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (paymentNotification.reviewedAt) {
      console.log("‚ùå Already reviewed at:", paymentNotification.reviewedAt);
      return NextResponse.json(
        { error: "Payment notification has already been reviewed" },
        { status: 400 }
      );
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï payment notification ‡∏û‡∏£‡πâ‡∏≠‡∏° review info
    console.log("üìù Updating payment notification review...");
    const updatedNotification = await prisma.paymentNotification.update({
      where: { id: notificationId },
      data: {
        status: status as any,
        reviewedAt: new Date(),
        reviewedBy: user.displayName || user.email || session.user.id,
        reviewNote: reviewNote?.trim() || null,
      },
      include: {
        order: {
          include: {
            user: {
              select: {
                id: true,
                displayName: true,
                email: true,
              }
            }
          }
        }
      }
    });

    // ‡∏´‡∏≤‡∏Å approve ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    if (status === 'APPROVED') {
      console.log("‚úÖ Payment approved, checking if order is fully paid...");
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà approve ‡πÅ‡∏•‡πâ‡∏ß
      const approvedPayments = await prisma.paymentNotification.findMany({
        where: {
          orderId: paymentNotification.orderId,
          status: 'APPROVED'
        }
      });

      const totalApprovedAmount = approvedPayments.reduce((sum, payment) => {
        return sum + Number(payment.transferAmount);
      }, 0);

      const orderTotal = Number(paymentNotification.order.totalAmount);

      console.log("üí∞ Payment summary:", {
        orderTotal,
        totalApprovedAmount,
        isFullyPaid: totalApprovedAmount >= orderTotal
      });

      // ‡∏´‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô CONFIRMED
      if (totalApprovedAmount >= orderTotal) {
        await prisma.order.update({
          where: { id: paymentNotification.orderId },
          data: { status: 'CONFIRMED' }
        });
        console.log("üéâ Order status updated to CONFIRMED - payment complete!");
      }
    }

    console.log(`‚úÖ Admin ${user.displayName || user.email} reviewed payment notification ${notificationId} as ${status}`);

    return NextResponse.json({
      success: true,
      message: `Payment notification ${status.toLowerCase()} successfully`,
      reviewedNotification: {
        id: updatedNotification.id,
        orderId: updatedNotification.orderId,
        orderNumber: updatedNotification.order.orderNumber,
        transferAmount: updatedNotification.transferAmount,
        status: updatedNotification.status,
        reviewedAt: updatedNotification.reviewedAt,
        reviewedBy: updatedNotification.reviewedBy,
        reviewNote: updatedNotification.reviewNote,
        customerName: updatedNotification.order.user.displayName,
      }
    });

  } catch (error) {
    console.error("‚ùå Error reviewing payment notification:", error);
    return NextResponse.json(
      { 
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error"
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
