import { NextRequest, NextResponse } from "next/server";
import { stripe } from "@/lib/stripe-server";
import { prisma } from "@/lib/prisma";
import { headers } from "next/headers";

export async function POST(request: NextRequest) {
  try {
    const body = await request.text();
    const headersList = await headers();
    const signature = headersList.get("stripe-signature");

    if (!signature) {
      console.error("No Stripe signature found");
      return NextResponse.json(
        { error: "No signature" },
        { status: 400 }
      );
    }

    if (!process.env.STRIPE_WEBHOOK_SECRET) {
      console.error("STRIPE_WEBHOOK_SECRET is not configured");
      return NextResponse.json(
        { error: "Webhook secret not configured" },
        { status: 500 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö webhook signature
    const event = stripe.webhooks.constructEvent(
      body,
      signature,
      process.env.STRIPE_WEBHOOK_SECRET
    );

    console.log("=== STRIPE WEBHOOK RECEIVED ===");
    console.log("Event type:", event.type);
    console.log("Event ID:", event.id);
    console.log("Event data object type:", typeof event.data.object);
    console.log("Event data object keys:", Object.keys(event.data.object));
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    switch (event.type) {
      case 'payment_intent.succeeded':
        console.log("Processing payment success...");
        await handlePaymentSuccess(event.data.object as any);
        break;
      
      case 'payment_intent.payment_failed':
        console.log("Processing payment failure...");
        await handlePaymentFailed(event.data.object as any);
        break;
      
      case 'checkout.session.completed':
        console.log("Processing checkout session completed...");
        await handleCheckoutSessionCompleted(event.data.object as any);
        break;
      
      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    return NextResponse.json({ received: true });

  } catch (error: any) {
    console.error("Stripe webhook error:", error.message);
    return NextResponse.json(
      { error: "Webhook handler failed" },
      { status: 400 }
    );
  }
}

async function handlePaymentSuccess(paymentIntent: any) {
  try {
    console.log("=== PAYMENT SUCCESS HANDLER ===");
    console.log("Payment Intent ID:", paymentIntent.id);
    console.log("Payment Intent metadata:", paymentIntent.metadata);
    console.log("Payment Intent amount:", paymentIntent.amount);
    
    const orderNumber = paymentIntent.metadata?.orderNumber;
    
    if (!orderNumber) {
      console.error("No orderNumber in payment intent metadata");
      return;
    }
    
    // ‡∏´‡∏≤ order ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ update ‡∏î‡πâ‡∏ß‡∏¢ id
    const existingOrder = await prisma.order.findFirst({
      where: { orderNumber },
    });

    if (!existingOrder) {
      console.error("Order not found:", orderNumber);
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order status ‡πÄ‡∏õ‡πá‡∏ô CONFIRMED  
    const order = await prisma.order.update({
      where: { id: existingOrder.id },
      data: {
        status: "CONFIRMED", // ‡πÉ‡∏ä‡πâ CONFIRMED ‡πÅ‡∏ó‡∏ô PAID
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏°‡∏µ paymentMethod ‡∏´‡∏£‡∏∑‡∏≠ stripePaymentIntentId field ‡πÉ‡∏ô Order model
      },
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ payment notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payment Intent ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingNotification = await prisma.paymentNotification.findFirst({
      where: {
        orderId: order.id,
        paymentSlipFileName: `stripe-payment-${paymentIntent.id}`,
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á payment notification record ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!existingNotification) {
      await prisma.paymentNotification.create({
        data: {
          orderId: order.id,
          transferAmount: (paymentIntent.amount / 100).toString(), // Convert back from cents
          transferDate: new Date(),
          transferTime: new Date().toTimeString().slice(0, 5),
          paymentSlipData: null, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
          paymentSlipFileName: `stripe-payment-${paymentIntent.id}`,
          status: "APPROVED",
          submittedAt: new Date(),
          note: `‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ú‡πà‡∏≤‡∏ô Stripe - Payment Intent: ${paymentIntent.id}`,
        },
      });
      console.log("‚úÖ New payment notification created for:", paymentIntent.id);
    } else {
      console.log("‚ö†Ô∏è Payment notification already exists for:", paymentIntent.id);
    }

    console.log("Order updated successfully:", orderNumber);

    // ‡∏™‡πà‡∏á LINE notification ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÉ‡∏´‡∏°‡πà
    if (!existingNotification) {
      await sendLineNotification(order);
    } else {
      console.log("‚ö†Ô∏è Skipping LINE notification - already sent for this payment");
    }

  } catch (error) {
    console.error("Error handling payment success:", error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á LINE notification
async function sendLineNotification(order: any) {
  try {
    console.log("üöÄ [WEBHOOK] ‡∏™‡πà‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE API...");
    console.log("üöÄ [WEBHOOK] Order ID:", order.id);
    console.log("üöÄ [WEBHOOK] Order Number:", order.orderNumber);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order items ‡∏û‡∏£‡πâ‡∏≠‡∏° product details
    const orderWithItems = await prisma.order.findUnique({
      where: { id: order.id },
      include: {
        orderItems: {
          include: {
            product: true
          }
        }
      }
    });

    if (!orderWithItems) {
      console.error("‚ùå [WEBHOOK] Order not found for LINE notification:", order.id);
      return;
    }
    
    console.log("‚úÖ [WEBHOOK] Order found with", orderWithItems.orderItems.length, "items");
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
    const receiptData = {
      orderNumber: orderWithItems.orderNumber,
      customerName: orderWithItems.customerName,
      customerEmail: orderWithItems.customerEmail,
      customerPhone: orderWithItems.customerPhone,
      items: orderWithItems.orderItems?.map((item: any) => ({
        productName: item.product?.name || `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.productId}`,
        quantity: item.quantity,
        price: parseFloat(item.price.toString()),
        total: parseFloat(item.price.toString()) * item.quantity
      })) || [],
      subtotal: orderWithItems.orderItems?.reduce((sum: number, item: any) => 
        sum + (parseFloat(item.price.toString()) * item.quantity), 0) || 0,
      shippingFee: parseFloat(orderWithItems.shippingFee?.toString() || "0"),
      discountAmount: parseFloat(orderWithItems.discountAmount?.toString() || "0"),
      total: parseFloat(orderWithItems.totalAmount.toString()), // total ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
      paymentType: "FULL_PAYMENT", // ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏°‡∏≠
      depositAmount: 0,
      remainingAmount: 0,
      shippingMethod: orderWithItems.shippingMethod || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      shippingAddress: orderWithItems.shippingAddress || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      orderStatus: "CONFIRMED", // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô Stripe ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      paymentMethod: "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (Stripe)"
    };

    const lineResponse = await fetch(`${process.env.NEXTAUTH_URL || 'https://corgi.theredpotion.com'}/api/line/send-receipt`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-webhook-source": "stripe",
      },
      body: JSON.stringify(receiptData),
    });

    console.log("üì° [WEBHOOK] LINE API response status:", lineResponse.status);

    if (lineResponse.ok) {
      const lineResult = await lineResponse.json();
      console.log("‚úÖ [WEBHOOK] LINE Response:", lineResult);
      if (lineResult.success) {
        console.log("‚úÖ [WEBHOOK] Receipt sent to LINE successfully");
      } else if (lineResult.skipLine) {
        console.warn("‚ö†Ô∏è [WEBHOOK] LINE messaging is not configured");
      }
    } else {
      const errorText = await lineResponse.text();
      console.error("‚ùå [WEBHOOK] Failed to send receipt to LINE:", errorText);
    }
  } catch (lineError) {
    console.error("‚ùå [WEBHOOK] LINE API error:", lineError);
    // LINE error ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á webhook
  }
}

async function handleCheckoutSessionCompleted(session: any) {
  try {
    console.log("=== CHECKOUT SESSION COMPLETED ===");
    console.log("Session ID:", session.id);
    console.log("Session metadata:", session.metadata);
    console.log("Payment Intent ID:", session.payment_intent);
    console.log("Payment Status:", session.payment_status);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.payment_status !== 'paid') {
      console.log("Payment not completed yet, status:", session.payment_status);
      return;
    }
    
    const orderNumber = session.metadata?.orderNumber;
    
    if (!orderNumber) {
      console.error("No orderNumber in checkout session metadata");
      return;
    }
    
    // ‡∏´‡∏≤ order ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ update ‡∏î‡πâ‡∏ß‡∏¢ id
    const existingOrder = await prisma.order.findFirst({
      where: { orderNumber },
    });

    if (!existingOrder) {
      console.error("Order not found:", orderNumber);
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order status ‡πÄ‡∏õ‡πá‡∏ô CONFIRMED  
    const order = await prisma.order.update({
      where: { id: existingOrder.id },
      data: {
        status: "CONFIRMED", // ‡πÉ‡∏ä‡πâ CONFIRMED ‡πÅ‡∏ó‡∏ô PAID
      },
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ payment notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Session ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingNotification = await prisma.paymentNotification.findFirst({
      where: {
        orderId: order.id,
        paymentSlipFileName: `stripe-session-${session.id}`,
      },
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á payment notification record ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!existingNotification) {
      const amountInTHB = session.amount_total / 100; // Convert from satang to THB
      
      await prisma.paymentNotification.create({
        data: {
          orderId: order.id,
          transferAmount: amountInTHB.toString(),
          transferDate: new Date(),
          transferTime: new Date().toTimeString().slice(0, 5),
          paymentSlipData: null, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
          paymentSlipFileName: `stripe-session-${session.id}`,
          status: "APPROVED",
          submittedAt: new Date(),
          note: `‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ú‡πà‡∏≤‡∏ô Stripe - Session: ${session.id}, Payment Intent: ${session.payment_intent}`,
        },
      });
      console.log("‚úÖ New payment notification created for session:", session.id);
    } else {
      console.log("‚ö†Ô∏è Payment notification already exists for session:", session.id);
    }

    console.log("Order updated successfully:", orderNumber);

    // ‡∏™‡πà‡∏á LINE notification ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÉ‡∏´‡∏°‡πà
    if (!existingNotification) {
      await sendLineNotification(order);
    } else {
      console.log("‚ö†Ô∏è Skipping LINE notification - already sent for this session");
    }

  } catch (error) {
    console.error("Error handling checkout session completed:", error);
  }
}

async function handlePaymentFailed(paymentIntent: any) {
  try {
    console.log("Payment failed:", paymentIntent.id);
    
    const orderNumber = paymentIntent.metadata.orderNumber;
    
    // ‡∏´‡∏≤ order ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ update ‡∏î‡πâ‡∏ß‡∏¢ id
    const existingOrder = await prisma.order.findFirst({
      where: { orderNumber },
    });

    if (!existingOrder) {
      console.error("Order not found:", orderNumber);
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order status ‡πÄ‡∏õ‡πá‡∏ô PAYMENT_FAILED
    await prisma.order.update({
      where: { id: existingOrder.id },
      data: {
        status: "CANCELLED", // ‡πÉ‡∏ä‡πâ CANCELLED ‡πÅ‡∏ó‡∏ô PAYMENT_FAILED
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏°‡∏µ paymentMethod ‡∏´‡∏£‡∏∑‡∏≠ stripePaymentIntentId field ‡πÉ‡∏ô Order model
      },
    });

    console.log("Order marked as payment failed:", orderNumber);

  } catch (error) {
    console.error("Error handling payment failure:", error);
  }
}
