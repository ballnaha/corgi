import { prisma } from "./prisma";

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ system setting ‡∏à‡∏≤‡∏Å database
 */
export async function getSystemSetting(key: string): Promise<string | null> {
  try {
    const setting = await prisma.systemSetting.findUnique({
      where: { key },
    });
    return setting?.value || null;
  } catch (error) {
    console.error(`‚ùå Error fetching system setting ${key}:`, error);
    return null;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
 */
export async function getSystemSettingNumber(key: string, defaultValue: number = 0): Promise<number> {
  const value = await getSystemSetting(key);
  if (!value) return defaultValue;
  
  const parsed = parseFloat(value);
  return isNaN(parsed) ? defaultValue : parsed;
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô boolean
 */
export async function getSystemSettingBoolean(key: string, defaultValue: boolean = false): Promise<boolean> {
  const value = await getSystemSetting(key);
  if (!value) return defaultValue;
  
  return value.toLowerCase() === 'true';
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö deposit
 */
export async function getDepositSettings() {
  const [minAmount, percentage, enabled] = await Promise.all([
    getSystemSettingNumber("deposit.min_amount", 10000),
    getSystemSettingNumber("deposit.percentage", 10),
    getSystemSettingBoolean("deposit.enabled", true)
  ]);

  return {
    minAmount,
    percentage: percentage / 100, // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô decimal (10% -> 0.1)
    enabled
  };
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ system setting
 */
export async function updateSystemSetting(key: string, value: string, type: string = "string", category: string = "general"): Promise<boolean> {
  try {
    console.log(`üìù Updating system setting: ${key} = ${value} (type: ${type}, category: ${category})`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existing = await prisma.systemSetting.findUnique({
      where: { key },
    });

    if (existing) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      await prisma.systemSetting.update({
        where: { key },
        data: {
          value,
          type,
          category,
          updatedAt: new Date(),
        },
      });
      console.log(`‚úÖ Updated system setting: ${key}`);
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      await prisma.systemSetting.create({
        data: {
          key,
          value,
          type,
          category,
          isActive: true,
        },
      });
      console.log(`‚úÖ Created system setting: ${key}`);
    }
    return true;
  } catch (error: any) {
    console.error(`‚ùå Error updating system setting ${key}:`, error);
    console.error(`‚ùå Error details:`, {
      message: error.message,
      code: error.code,
      meta: error.meta,
    });
    return false;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deposit settings ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
 */
export async function initializeDepositSettings() {
  const defaultSettings = [
    {
      key: "deposit.min_amount",
      value: "10000",
      type: "number",
      category: "payment",
      description: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏±‡∏î‡∏à‡∏≥ (‡∏ö‡∏≤‡∏ó)"
    },
    {
      key: "deposit.percentage",
      value: "10",
      type: "number", 
      category: "payment",
      description: "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏±‡∏î‡∏à‡∏≥ (%)"
    },
    {
      key: "deposit.enabled",
      value: "true",
      type: "boolean",
      category: "payment",
      description: "‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏±‡∏î‡∏à‡∏≥"
    }
  ];

  for (const setting of defaultSettings) {
    const exists = await getSystemSetting(setting.key);
    if (!exists) {
      try {
        await prisma.systemSetting.create({
          data: {
            key: setting.key,
            value: setting.value,
            type: setting.type,
            category: setting.category,
            description: setting.description,
            isActive: true,
          },
        });
        console.log(`‚úÖ Created default system setting: ${setting.key}`);
      } catch (error) {
        console.error(`‚ùå Error creating default setting ${setting.key}:`, error);
      }
    }
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export async function getAllSystemSettings() {
  try {
    const settings = await prisma.systemSetting.findMany({
      orderBy: [
        { category: 'asc' },
        { key: 'asc' },
      ],
    });
    return settings;
  } catch (error) {
    console.error("‚ùå Error fetching all system settings:", error);
    return [];
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏° category
 */
export async function getSystemSettingsByCategory(category: string) {
  try {
    const settings = await prisma.systemSetting.findMany({
      where: { category },
      orderBy: { key: 'asc' },
    });
    return settings;
  } catch (error) {
    console.error(`‚ùå Error fetching system settings for category ${category}:`, error);
    return [];
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
 */
export async function createSystemSetting(key: string, value: string, type: string = "string", category: string = "general", description?: string) {
  try {
    console.log(`üìù Creating system setting: ${key} = ${value}`);
    
    const setting = await prisma.systemSetting.create({
      data: {
        key,
        value,
        type,
        category,
        description: description || null,
        isActive: true,
      },
    });
    
    console.log(`‚úÖ Created system setting: ${key}`);
    return setting;
  } catch (error: any) {
    console.error(`‚ùå Error creating system setting ${key}:`, error);
    console.error(`‚ùå Error details:`, {
      message: error.message,
      code: error.code,
      meta: error.meta,
    });
    throw error;
  }
}